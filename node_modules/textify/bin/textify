#!/usr/bin/env node

var argv = require('optimist')
			.usage('Textify text')
			.alias('x', 'tobinary')
			.string('tobinary')
			.string('x')
			.describe('x', 'convert to binary')
			.alias('w', 'wrap')
			.describe('w', 'wrap number')
			.alias('z', 'frombinary')
			.string('frombinary')
			.string('z')
			.describe('z', 'convert from binary')
			.alias('t', 'texturize')
			.string('t')
			.string('texturize')
			.describe('t', 'Texturize the text')
			.alias('r', 'rot13')
			.string('r')
			.string('rot13')
			.describe('r', 'rot13 the text')
			.alias('o', 'rot')
			.string('o')
			.string('rot')
			.describe('o', 'rot the text')
			.alias('n', 'num')
			.describe('n', 'number input')
			.alias('q', 'toleet')
			.string('q')
			.string('toleet')
			.describe('q', 'to leet text')
			.alias('y', 'fromleet')
			.string('y')
			.string('fromleet')
			.describe('y', 'from leet text')
			.alias('m', 'tomorse')
			.string('m')
			.string('tomorse')
			.describe('m', 'to morse code')
			.alias('k', 'frommorse')
			.string('k')
			.string('frommorse')
			.describe('k', 'from morse code')
			.alias('i', 'tohex')
			.string('i')
			.string('tohex')
			.boolean('s')
			.describe('s', 'use space')
			.describe('i', 'to hex code')
			.alias('p', 'fromhex')
			.string('p')
			.string('fromhex')
			.describe('p', 'from hex code')
			.alias('e', 'torobber')
			.string('e')
			.string('torobber')
			.describe('e', 'to robber language')
			.alias('u', 'fromrobber')
			.string('u')
			.string('fromrobber')
			.describe('u', 'from robber language')
			.alias('j', 'topiglatin')
			.string('j')
			.string('topiglatin')
			.describe('j', 'to pig latin')
			.string('reverse')
			.describe('reverse', 'reverse text')
			.string('trim')
			.describe('trim', 'trim')
			.string('stripNonAlpha')
			.describe('stripNonAlpha', 'strip non alpha')
			.string('stripVocals')
			.describe('stripVocals', 'strip vocals')
			.string('stripConsonants')
			.describe('stripConsonants', 'strip consonants')
			.argv;
			
var textify = require('../lib/textify');

if (argv.tobinary) {
	console.log(textify.toBinary(argv.tobinary, argv.wrap ? argv.wrap : 0));
}
if (argv.frombinary) {
	console.log(textify.fromBinary(argv.frombinary));
}
if (argv.texturize) {
	console.log(textify.texturize(argv.texturize));
}
if (argv.rot13) {
	console.log(textify.rot13(argv.rot13));
}
if (argv.rot && argv.num) {
	console.log(textify.rot(argv.rot, argv.num));
}
if (argv.toleet) {
	console.log(textify.toLeet(argv.toleet));
}
if (argv.fromleet) {
	console.log(textify.fromLeet(argv.fromleet));
}
if (argv.tomorse) {
	console.log(textify.toMorse(argv.tomorse));
}
if (argv.frommorse) {
	console.log(textify.fromMorse(argv.frommorse));
}
if (argv.tohex) {
	console.log(textify.toHex(argv.tohex, argv.s ? true : false));
}
if (argv.fromhex) {
	console.log(textify.fromHex(argv.fromhex));
}
if (argv.torobber) {
	console.log(textify.toRobberLanguage(argv.torobber));
}
if (argv.fromrobber) {
	console.log(textify.fromRobberLanguage(argv.fromrobber));
}
if (argv.topiglatin) {
	console.log(textify.toPigLatin(argv.topiglatin));
}
if (argv.reverse) {
	console.log(textify.reverse(argv.reverse));
}
if (argv.trim) {
	console.log(textify.trim(argv.trim));
}
if (argv.stripNonAlpha) {
	console.log(textify.stripNonAlpha(argv.stripNonAlpha));
}
if (argv.stripVocals) {
	console.log(textify.stripVocals(argv.stripVocals));
}
if (argv.stripConsonants) {
	console.log(textify.stripConsonants(argv.stripConsonants));
}